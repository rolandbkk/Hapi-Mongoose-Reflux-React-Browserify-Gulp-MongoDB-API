{"version":3,"names":[],"mappings":"","sources":["main.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\nvar Reflux = require('reflux');\n\n// Each action is like an event channel for one specific event. Actions are called by components.\n// The store is listening to all actions, and the components in turn are listening to the store.\n// Thus the flow is: User interaction -> component calls action -> store reacts and triggers -> components update\n\nvar TodoActions = Reflux.createActions([\n    \"toggleItem\",     // called by button in TodoItem\n    \"toggleAllItems\", // called by button in TodoMain (even though you'd think TodoHeader)\n    \"addItem\",        // called by hitting enter in field in TodoHeader\n    \"removeItem\",     // called by button in TodoItem\n    \"clearCompleted\", // called by button in TodoFooter\n    \"editItem\"        // called by finishing edit in TodoItem\n]);\n\nmodule.exports = TodoActions;\n\n},{\"reflux\":\"reflux\"}],2:[function(require,module,exports){\n'use strict';\n\nvar React = require('react');\nvar Reflux = require('reflux');\nvar ReactRouter = require('react-router');\nvar RouteHandler = ReactRouter.RouteHandler;\n\nvar TodoListStore = require('../stores/store.js');\n\nvar TodoHeader = require('./todoHeader.jsx');\nvar TodoFooter = require('./todoFooter.jsx');\n\n// Renders the full application\n// activeRouteHandler will always be TodoMain, but with different 'showing' prop (all/completed/active)\nvar TodoApp = React.createClass({displayName: \"TodoApp\",\n    // this will cause setState({list:updatedlist}) whenever the store does trigger(updatedlist)\n    mixins: [Reflux.connect(TodoListStore,\"list\")],\n\n    render: function() {\n        return (\n            React.createElement(\"div\", null, \n                React.createElement(TodoHeader, null), \n                React.createElement(RouteHandler, {list: this.state.list}), \n                React.createElement(TodoFooter, {list: this.state.list})\n            )\n        );\n    }\n});\n\nmodule.exports = TodoApp;\n\n},{\"../stores/store.js\":8,\"./todoFooter.jsx\":3,\"./todoHeader.jsx\":4,\"react\":\"react\",\"react-router\":\"react-router\",\"reflux\":\"reflux\"}],3:[function(require,module,exports){\n/** @jsx React.DOM */\nvar _ = require('underscore');\nvar React = require('react/addons');\nvar ReactRouter = require('react-router');\n\nvar TodoActions = require('../actions/actions.js');\n\n// Renders the bottom item count, navigation bar and clearallcompleted button\n// Used in TodoApp\nvar TodoFooter = React.createClass({displayName: \"TodoFooter\",\n    propTypes: {\n        list: React.PropTypes.arrayOf(React.PropTypes.object).isRequired,\n    },\n    render: function() {\n        var nbrcompleted = _.filter(this.props.list, \"isComplete\").length,\n            nbrtotal = this.props.list.length,\n            nbrincomplete = nbrtotal-nbrcompleted,\n            clearButtonClass = React.addons.classSet({hidden: nbrcompleted < 1}),\n            footerClass = React.addons.classSet({hidden: !nbrtotal }),\n            completedLabel = \"Clear completed (\" + nbrcompleted + \")\",\n            itemsLeftLabel = nbrincomplete === 1 ? \" item left\" : \" items left\";\n        return (\n            React.createElement(\"footer\", {id: \"footer\", className: footerClass}, \n                React.createElement(\"span\", {id: \"todo-count\"}, React.createElement(\"strong\", null, nbrincomplete), itemsLeftLabel), \n                React.createElement(\"ul\", {id: \"filters\"}, \n                    React.createElement(\"li\", null, \n                        React.createElement(ReactRouter.Link, {activeClassName: \"selected\", to: \"All\"}, \"All\")\n                    ), \n                    React.createElement(\"li\", null, \n                        React.createElement(ReactRouter.Link, {activeClassName: \"selected\", to: \"Active\"}, \"Active\")\n                    ), \n                    React.createElement(\"li\", null, \n                        React.createElement(ReactRouter.Link, {activeClassName: \"selected\", to: \"Completed\"}, \"Completed\")\n                    )\n                ), \n                React.createElement(\"button\", {id: \"clear-completed\", className: clearButtonClass, onClick: TodoActions.clearCompleted}, completedLabel)\n            )\n        );\n    }\n});\n\nmodule.exports = TodoFooter;\n\n},{\"../actions/actions.js\":1,\"react-router\":\"react-router\",\"react/addons\":\"react/addons\",\"underscore\":\"underscore\"}],4:[function(require,module,exports){\n/** @jsx React.DOM */\nvar React = require('react');\nvar ReactRouter = require('react-router');\n\nvar TodoActions = require('../actions/actions.js');\n\n\n// Renders the headline and the form for creating new todos.\n// Used in TodoApp\n// Observe that the toogleall button is NOT rendered here, but in TodoMain (it is then moved up to the header with CSS)\nvar TodoHeader = React.createClass({displayName: \"TodoHeader\",\n    handleValueChange: function(evt) {\n        var text = evt.target.value;\n        if (evt.which === 13 && text) { // hit enter, create new item if field isn't empty\n            TodoActions.addItem(text);\n            evt.target.value = '';\n        } else if (evt.which === 27) { // hit escape, clear without creating\n            evt.target.value = '';\n        }\n    },\n    render: function() {\n        return (\n            React.createElement(\"header\", {id: \"header\"}, \n                React.createElement(\"h1\", null, \"todos\"), \n                React.createElement(\"input\", {id: \"new-todo\", placeholder: \"What needs to be done?\", autoFocus: true, onKeyUp: this.handleValueChange})\n            )\n        );\n    }\n});\n\nmodule.exports = TodoHeader;\n\n},{\"../actions/actions.js\":1,\"react\":\"react\",\"react-router\":\"react-router\"}],5:[function(require,module,exports){\n/** @jsx React.DOM */\nvar React = require('react/addons');\nvar ReactRouter = require('react-router');\n\nvar TodoActions = require('../actions/actions.js');\n\n\n// Renders a single Todo item in the list\n// Used in TodoList\nvar TodoItem = React.createClass({displayName: \"TodoItem\",\n    propTypes: {\n        label: React.PropTypes.string.isRequired,\n        isComplete: React.PropTypes.bool.isRequired,\n        id: React.PropTypes.number\n    },\n    mixins: [React.addons.LinkedStateMixin], // exposes this.linkState used in render\n    getInitialState: function() {\n        return {};\n    },\n    handleToggle: function(evt) {\n        TodoActions.toggleItem(this.props.id);\n    },\n    handleEditStart: function(evt) {\n        evt.preventDefault();\n        // because of linkState call in render, field will get value from this.state.editValue\n        this.setState({\n            isEditing: true,\n            editValue: this.props.label\n        }, function() {\n            this.refs.editInput.getDOMNode().focus();\n        });\n    },\n    handleValueChange: function(evt) {\n        var text = this.state.editValue; // because of the linkState call in render, this is the contents of the field\n        // we pressed enter, if text isn't empty we blur the field which will cause a save\n        if (evt.which === 13 && text) {\n            this.refs.editInput.getDOMNode().blur();\n        }\n        // pressed escape. set editing to false before blurring so we won't save\n        else if (evt.which === 27) {\n            this.setState({ isEditing: false },function(){\n                this.refs.editInput.getDOMNode().blur();\n            });\n        }\n    },\n    handleBlur: function() {\n        var text = this.state.editValue; // because of the linkState call in render, this is the contents of the field\n        // unless we're not editing (escape was pressed) or text is empty, save!\n        if (this.state.isEditing && text) {\n            TodoActions.editItem(this.props.id, text);\n        }\n        // whatever the outcome, if we left the field we're not editing anymore\n        this.setState({isEditing:false});\n    },\n    handleDestroy: function() {\n        TodoActions.removeItem(this.props.id);\n    },\n    render: function() {\n        var classes = React.addons.classSet({\n            'completed': this.props.isComplete,\n            'editing': this.state.isEditing\n        });\n        return (\n            React.createElement(\"li\", {className: classes}, \n                React.createElement(\"div\", {className: \"view\"}, \n                    React.createElement(\"input\", {className: \"toggle\", type: \"checkbox\", checked: !!this.props.isComplete, onChange: this.handleToggle}), \n                    React.createElement(\"label\", {onDoubleClick: this.handleEditStart}, this.props.label), \n                    React.createElement(\"button\", {className: \"destroy\", onClick: this.handleDestroy})\n                ), \n                React.createElement(\"input\", {ref: \"editInput\", className: \"edit\", valueLink: this.linkState('editValue'), onKeyUp: this.handleValueChange, onBlur: this.handleBlur})\n            )\n        );\n    }\n});\n\nmodule.exports = TodoItem;\n\n},{\"../actions/actions.js\":1,\"react-router\":\"react-router\",\"react/addons\":\"react/addons\"}],6:[function(require,module,exports){\n/** @jsx React.DOM */\nvar _ = require('underscore');\nvar React = require('react/addons');\nvar ReactRouter = require('react-router');\n\nvar TodoActions = require('../actions/actions.js');\nvar TodoStore = require('../stores/store.js');\n\nvar TodoItem = require('./todoItem.jsx');\n\n\n// Renders the todo list as well as the toggle all button\n// Used in TodoApp\nvar makeTodoMain = function(showing) {\n    return React.createClass({\n        propTypes: {\n            list: React.PropTypes.arrayOf(React.PropTypes.object).isRequired,\n        },\n        toggleAll: function(evt) {\n            TodoActions.toggleAllItems(evt.target.checked);\n        },\n        render: function() {\n            var filteredList;\n            switch(showing){\n                case 'all':\n                    filteredList = this.props.list;\n                    break;\n                case 'completed':\n                    filteredList = _.filter(this.props.list,function(item){ return item.isComplete; });\n                    break;\n                case 'active':\n                    filteredList = _.filter(this.props.list,function(item){ return !item.isComplete; });\n            }\n            var classes = React.addons.classSet({\n                \"hidden\": this.props.list.length < 1\n            });\n            return (\n                React.createElement(\"section\", {id: \"main\", className: classes}, \n                    React.createElement(\"input\", {id: \"toggle-all\", type: \"checkbox\", onChange: this.toggleAll}), \n                    React.createElement(\"label\", {htmlFor: \"toggle-all\"}, \"Mark all as complete\"), \n                    React.createElement(\"ul\", {id: \"todo-list\"}, \n                         filteredList.map(function(item){return React.createElement(TodoItem, {label: item.label, isComplete: item.isComplete, id: item.id, key: item.id}); }) \n                    )\n                )\n            );\n        }\n    });\n}\n\nmodule.exports = makeTodoMain;\n\n},{\"../actions/actions.js\":1,\"../stores/store.js\":8,\"./todoItem.jsx\":5,\"react-router\":\"react-router\",\"react/addons\":\"react/addons\",\"underscore\":\"underscore\"}],7:[function(require,module,exports){\nvar React = require('react');\nvar Reflux = require('reflux');\nvar ReactRouter = require('react-router');\nvar TodoMain = require('./components/todoMain.jsx');\nvar TodoApp = require('./components/todoApp.jsx');\n\nvar routes = (\n        React.createElement(ReactRouter.Route, {handler: TodoApp}, \n            React.createElement(ReactRouter.Route, {name: \"All\", path: \"/\", handler: TodoMain(\"all\")}), \n            React.createElement(ReactRouter.Route, {name: \"Completed\", path: \"/completed\", handler: TodoMain(\"completed\")}), \n            React.createElement(ReactRouter.Route, {name: \"Active\", path: \"/active\", handler: TodoMain(\"active\")})\n        )\n);\n\n\nReactRouter.run(routes, function (Handler) {\n      React.render(React.createElement(Handler, null), document.getElementById('todoapp'));\n});\n\n},{\"./components/todoApp.jsx\":2,\"./components/todoMain.jsx\":6,\"react\":\"react\",\"react-router\":\"react-router\",\"reflux\":\"reflux\"}],8:[function(require,module,exports){\n'use strict';\nvar _ = require('underscore');\nvar React = require('react');\nvar Reflux = require('reflux');\nvar TodoActions = require('../actions/actions.js');\n\n// some variables and helpers for our fake database stuff\nvar todoCounter = 0,\n    localStorageKey = \"todos\";\n\nfunction getItemById(list,itemId){\n    return _.find(list, function(item) {\n        return item.id === itemId;\n    });\n}\n\nvar TodoListStore = Reflux.createStore({\n    // this will set up listeners to all publishers in TodoActions, using onKeyname (or keyname) as callbacks\n    listenables: [TodoActions],\n    onEditItem: function(itemId, newLabel) {\n        var foundItem = getItemById(this.list,itemId);\n        if (!foundItem) {\n            return;\n        }\n        foundItem.label = newLabel;\n        this.updateList(this.list);\n    },\n    onAddItem: function(label) {\n        this.updateList([{\n            id: todoCounter++,\n            created: new Date(),\n            isComplete: false,\n            label: label\n        }].concat(this.list));\n    },\n    onRemoveItem: function(itemId) {\n        this.updateList(_.filter(this.list,function(item){\n            return item.id!==itemId;\n        }));\n    },\n    onToggleItem: function(itemId) {\n        var foundItem = getItemById(this.list,itemId);\n        if (foundItem) {\n            foundItem.isComplete = !foundItem.isComplete;\n            this.updateList(this.list);\n        }\n    },\n    onToggleAllItems: function(checked) {\n        this.updateList(_.map(this.list, function(item) {\n            item.isComplete = checked;\n            return item;\n        }));\n    },\n    onClearCompleted: function() {\n        this.updateList(_.filter(this.list, function(item) {\n            return !item.isComplete;\n        }));\n    },\n    // called whenever we change a list. normally this would mean a database API call\n    updateList: function(list){\n        localStorage.setItem(localStorageKey, JSON.stringify(list));\n        // if we used a real database, we would likely do the below in a callback\n        this.list = list;\n        this.trigger(list); // sends the updated list to all listening components (TodoApp)\n    },\n    // this will be called by all listening components as they register their listeners\n    getInitialState: function() {\n        var loadedList = localStorage.getItem(localStorageKey);\n        if (!loadedList) {\n            // If no list is in localstorage, start out with a default one\n            this.list = [{\n                id: todoCounter++,\n                created: new Date(),\n                isComplete: false,\n                label: 'Rule the web'\n            }];\n        } else {\n            this.list = _.map(JSON.parse(loadedList), function(item) {\n                // just resetting the id property for each todo item\n                item.id = todoCounter++;\n                return item;\n            });\n        }\n        return this.list;\n    }\n});\n\nmodule.exports = TodoListStore;\n\n},{\"../actions/actions.js\":1,\"react\":\"react\",\"reflux\":\"reflux\",\"underscore\":\"underscore\"}]},{},[7]);\n"],"file":"main.js","sourceRoot":"/source/"}